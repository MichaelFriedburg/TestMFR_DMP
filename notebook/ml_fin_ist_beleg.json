{
	"name": "ml_fin_ist_beleg",
	"properties": {
		"folder": {
			"name": "ML_Notebooks_FIN_IST_BELEG"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool0",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fd41ebbc-f40b-4586-9fd3-c0f77708cef7"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2f51148a-d202-478e-93f0-ade833d83f40/resourceGroups/rg-dbim-immo-tst-1/providers/Microsoft.Synapse/workspaces/synw-immo-tst-1/bigDataPools/sparkpool0",
				"name": "sparkpool0",
				"type": "Spark",
				"endpoint": "https://synw-immo-tst-1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool0",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"#Mit diesen Schritten kannst du Parquet-Daten aus ADLS in Azure Synapse laden und als Tabelle registrieren.\r\n",
					"# Beispiel: Verbindung zu Azure Data Lake Storage und Lesen der Parquet-Datei\r\n",
					"\r\n",
					"# Speicherort der Parquet-Datei im ADLS\r\n",
					"adls_path = \"abfss://synapse@stdlimmotst1synapse.dfs.core.windows.net/synapse/workspaces/synw-immo-tst-1/fin_ist_beleg/COREVIEW.vw_OBJ_FIN_IST_BELEG.parquet\"\r\n",
					"\r\n",
					"\r\n",
					"# Lesen der Parquet-Datei\r\n",
					"df = spark.read.parquet(adls_path)\r\n",
					"\r\n",
					"# Schema anzeigen (optional)\r\n",
					"df.printSchema()\r\n",
					"\r\n",
					"# Optional: Schema definieren (manuell), falls gewünscht\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"id\", IntegerType(), True),\r\n",
					"    StructField(\"name\", StringType(), True),\r\n",
					"    StructField(\"age\", IntegerType(), True)\r\n",
					"])\r\n",
					"\r\n",
					"# Wenn du ein manuelles Schema verwendest:\r\n",
					"df = spark.read.schema(schema).parquet(adls_path)\r\n",
					"\r\n",
					"# Daten anzeigen (optional)\r\n",
					"df.show()\r\n",
					"\r\n",
					"# DataFrame als temporäre Tabelle registrieren\r\n",
					"df.createOrReplaceTempView(\"temp_table\")\r\n",
					"\r\n",
					"# Oder als dauerhafte Tabelle speichern\r\n",
					"df.write.mode(\"overwrite\").saveAsTable(\"synapse_table_name\")"
				]
			}
		]
	}
}